#version 460 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct LightGrid {
	uint offset;
	uint count;
};

struct ClusterAABB {
	vec4 minPoint;
	vec4 maxPoint;
};

struct Light {
	vec3 position;
	float radius;
};

layout(std430, binding = 2) buffer CompactClusters {
	uint compactClusters[];
};

layout(std140, binding = 3) buffer GlobalCount {
	uint activeClusterCount;
};

layout(std430, binding = 4) buffer ClusterAABBS {
	ClusterAABB clusterAABBS[];
};

layout(std430, binding = 5) buffer LightGrids {
	LightGrid lightGrids[];
};

layout(std430, binding = 6) buffer Lights {
	Light lights[];
};

layout(std430, binding = 7) buffer LightIndices {
	uint lightIndices[];
};

layout(std140, binding = 8) buffer GlobalLightIndexCount {
	uint globalLightIndexCount;
};

uniform mat4 viewMatrix;

float squareDistancePointAABB(vec3 point, uint clusterIndex)
{
    float squareDistance = 0.0;
    ClusterAABB currentCell = clusterAABBS[clusterIndex];

    for (int i = 0; i < 3; ++i)
	{
        float v = point[i];
        if(v < currentCell.minPoint[i])
		{
            squareDistance += (currentCell.minPoint[i] - v) * (currentCell.minPoint[i] - v);
        }
        if(v > currentCell.maxPoint[i])
		{
            squareDistance += (v - currentCell.maxPoint[i]) * (v - currentCell.maxPoint[i]);
        }
    }

    return squareDistance;
}

bool testSphereAABB(uint lightIndex, uint clusterIndex)
{
	float radius = lights[lightIndex].radius;
	vec3 center = vec3(viewMatrix * vec4(lights[lightIndex].position, 1));
	float squareDistance = squareDistancePointAABB(center, clusterIndex);
	return squareDistance <= radius * radius;
}

void main()
{
	uint globalIndex = gl_GlobalInvocationID.x +
                       gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x +
                       gl_GlobalInvocationID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_WorkGroupSize.x * gl_WorkGroupSize.y;
	uint clusterIndex = compactClusters[globalIndex];

	// if the global index is out of bounds, return. we dont need this if everything is working correctly
	if (globalIndex >= activeClusterCount)
	{
		return;
	}

	uint visibleLightsCount = 0;
	uint visibleLightIndices[10]; // maximum number of 10 lights per cluster for now
	for (uint i = 0; i < lights.length(); ++i)
	{
		if (testSphereAABB(i, clusterIndex))
		{
			visibleLightIndices[visibleLightsCount] = i;
			visibleLightsCount += 1;
		}
	}

	uint offset = atomicAdd(globalLightIndexCount, visibleLightsCount); // beginning of array will stay empty but for simplicities sake we will just ignore it
	for (uint i = 0; i < visibleLightsCount; ++i)
	{
		lightIndices[offset + i] = visibleLightIndices[i];
	}

	lightGrids[clusterIndex].offset = offset; // where to start reading from
	lightGrids[clusterIndex].count = visibleLightsCount; // how many indices to read from
}