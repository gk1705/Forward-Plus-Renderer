#version 460 core
#extension GL_NV_uniform_buffer_std430_layout : enable

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct LightGrid {
	uint offset;
	uint count;
};

layout(std430, binding = 1) buffer BoolArray {
	uint activeClusters[];
};

layout(std430, binding = 2) buffer CompactClusters {
	uint compactClusters[];
};

layout(std140, binding = 3) buffer GlobalCount {
	uint activeClusterCount;
};

layout(std430, binding = 5) buffer LightGrids {
	LightGrid lightGrids[];
};

layout(std430, binding = 7) buffer LightIndices {
	uint lightIndices[];
};

layout(std140, binding = 8) buffer GlobalLightIndexCount {
	uint globalLightIndexCount;
};

uniform int numClustersZ;
uniform int numClustersX;
uniform int numClustersY;

void main()
{
	int clusterIndex =	int(gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * numClustersX + gl_GlobalInvocationID.z * numClustersX * numClustersY);
	activeClusters[clusterIndex] = 0;
	compactClusters[clusterIndex] = 0;
	lightGrids[clusterIndex].offset = 0;
	lightGrids[clusterIndex].count = 0;
	lightIndices[clusterIndex] = 0;
	globalLightIndexCount = 0;
	activeClusterCount = 0;
}